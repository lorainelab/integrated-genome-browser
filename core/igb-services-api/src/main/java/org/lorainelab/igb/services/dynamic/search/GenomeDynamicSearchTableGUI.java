/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.lorainelab.igb.services.dynamic.search;

import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 *
 * @author sravani
 */
public class GenomeDynamicSearchTableGUI extends javax.swing.JPanel {

    private final GenomeDynamicSearchTableModel genomeDynamicSearchTableModel;
    private final GenomeDynamicSearchTable genomeDynamicSearchTable;
    private final ExternalGenomeDataProvider externalGenomeDataProvider;
    private int currentPage = 0;
    private final int rowsPerPage = 100;
    private String sortedColumn = "Common Name";
    private boolean ascending = true;

    /**
     * Creates new form GenomeDynamicSearchTableGUI
     */
    public GenomeDynamicSearchTableGUI(ExternalGenomeDataProvider externalGenomeDataProvider) {
        this.externalGenomeDataProvider = externalGenomeDataProvider;
        genomeDynamicSearchTableModel = new GenomeDynamicSearchTableModel(externalGenomeDataProvider);
        genomeDynamicSearchTable = new GenomeDynamicSearchTable(genomeDynamicSearchTableModel, externalGenomeDataProvider);
        initComponents();
        refreshTable();
        updateTableHeader(0, ascending);
        genomeDynamicSearchTable.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int columnIndex = genomeDynamicSearchTable.columnAtPoint(e.getPoint());
                String columnName = genomeDynamicSearchTable.getColumnName(columnIndex);
                if(!columnName.isBlank()) {
                    if(columnName.equals(sortedColumn))
                        ascending = !ascending;
                    else {
                        sortedColumn = columnName;
                        ascending = true;
                    }
                    externalGenomeDataProvider.setSorting(columnName, ascending);
                    currentPage = 0;
                    refreshTable();
                    updateTableHeader(columnIndex, ascending);
                }
            }
        });
    }

    private void updateTableHeader(int columnIndex, boolean ascending) {
        JTableHeader header = genomeDynamicSearchTable.getTableHeader();
        TableColumnModel columnModel = genomeDynamicSearchTable.getColumnModel();

        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            TableColumn column = columnModel.getColumn(i);
            String columnName = genomeDynamicSearchTable.getColumnName(i);
            if (i == columnIndex) {
                column.setHeaderValue(columnName + (ascending ? " ▲" : " ▼"));
            } else {
                column.setHeaderValue(columnName);
            }
        }

        header.repaint();
    }

    private void refreshTable() {
        genomeDynamicSearchTableModel.setData(externalGenomeDataProvider.getPageData(currentPage, rowsPerPage));
        updateVisibility();
    }
    
    private void updateVisibility() {
        previousButton.setEnabled(currentPage != 0);
        nextButton.setEnabled(((currentPage + 1) * rowsPerPage) < externalGenomeDataProvider.getTotalGenomes());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResultsTable = genomeDynamicSearchTable;
        clearSearchButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();

        jLabel1.setText("Start typing a genome name:");

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });

        searchResultsTable.setModel(genomeDynamicSearchTableModel);
        searchResultsTable.setSelectionBackground(new java.awt.Color(51, 153, 255));
        searchResultsTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(searchResultsTable);

        clearSearchButton.setText("Clear Search");
        clearSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSearchButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(previousButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearSearchButton)
                        .addGap(0, 110, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(previousButton))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextActionPerformed

    private void clearSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSearchButtonActionPerformed
        searchText.setText("");
        externalGenomeDataProvider.search("");
        refreshTable();
    }//GEN-LAST:event_clearSearchButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if ((currentPage + 1) * rowsPerPage < externalGenomeDataProvider.getTotalGenomes()) {
            currentPage++;
            refreshTable();
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        if (currentPage > 0) {
            currentPage--;
            refreshTable();
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        String text = searchText.getText().trim();
        externalGenomeDataProvider.search(text);
        currentPage = 0;
        refreshTable();
    }//GEN-LAST:event_searchTextKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearSearchButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JTable searchResultsTable;
    private javax.swing.JTextField searchText;
    // End of variables declaration//GEN-END:variables
}
